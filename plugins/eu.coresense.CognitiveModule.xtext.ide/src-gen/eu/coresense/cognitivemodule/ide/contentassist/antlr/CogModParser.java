/*
 * generated by Xtext 2.38.0
 */
package eu.coresense.cognitivemodule.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import eu.coresense.cognitivemodule.ide.contentassist.antlr.internal.InternalCogModParser;
import eu.coresense.cognitivemodule.services.CogModGrammarAccess;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CogModParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CogModGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CogModGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getCognitiveModuleAccess().getGroup(), "rule__CognitiveModule__Group__0");
			builder.put(grammarAccess.getCognitiveModuleAccess().getGroup_6(), "rule__CognitiveModule__Group_6__0");
			builder.put(grammarAccess.getCognitiveModuleAccess().getGroup_7(), "rule__CognitiveModule__Group_7__0");
			builder.put(grammarAccess.getCoreAccess().getGroup(), "rule__Core__Group__0");
			builder.put(grammarAccess.getModeletAccess().getGroup(), "rule__Modelet__Group__0");
			builder.put(grammarAccess.getMetaAccess().getGroup(), "rule__Meta__Group__0");
			builder.put(grammarAccess.getCouplingAccess().getGroup(), "rule__Coupling__Group__0");
			builder.put(grammarAccess.getCognitiveModuleAccess().getNameAssignment_1(), "rule__CognitiveModule__NameAssignment_1");
			builder.put(grammarAccess.getCognitiveModuleAccess().getCoreAssignment_5(), "rule__CognitiveModule__CoreAssignment_5");
			builder.put(grammarAccess.getCognitiveModuleAccess().getEfferentAssignment_6_2(), "rule__CognitiveModule__EfferentAssignment_6_2");
			builder.put(grammarAccess.getCognitiveModuleAccess().getAfferentAssignment_7_2(), "rule__CognitiveModule__AfferentAssignment_7_2");
			builder.put(grammarAccess.getCognitiveModuleAccess().getMetaAssignment_9(), "rule__CognitiveModule__MetaAssignment_9");
			builder.put(grammarAccess.getCognitiveModuleAccess().getCouplingAssignment_11(), "rule__CognitiveModule__CouplingAssignment_11");
			builder.put(grammarAccess.getCoreAccess().getNameAssignment_1(), "rule__Core__NameAssignment_1");
			builder.put(grammarAccess.getModeletAccess().getNameAssignment_0(), "rule__Modelet__NameAssignment_0");
			builder.put(grammarAccess.getModeletAccess().getTopicAssignment_4(), "rule__Modelet__TopicAssignment_4");
			builder.put(grammarAccess.getModeletAccess().getTypeAssignment_6(), "rule__Modelet__TypeAssignment_6");
			builder.put(grammarAccess.getMetaAccess().getNameAssignment_1(), "rule__Meta__NameAssignment_1");
			builder.put(grammarAccess.getCouplingAccess().getNameAssignment_1(), "rule__Coupling__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CogModGrammarAccess grammarAccess;

	@Override
	protected InternalCogModParser createParser() {
		InternalCogModParser result = new InternalCogModParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new CogModTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CogModGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CogModGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
