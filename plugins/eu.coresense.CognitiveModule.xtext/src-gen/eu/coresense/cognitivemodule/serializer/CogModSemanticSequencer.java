/*
 * generated by Xtext 2.38.0
 */
package eu.coresense.cognitivemodule.serializer;

import com.google.inject.Inject;
import eu.coresense.CognitiveModule.CognitiveModule;
import eu.coresense.CognitiveModule.CognitiveModulePackage;
import eu.coresense.CognitiveModule.Core;
import eu.coresense.CognitiveModule.Coupling;
import eu.coresense.CognitiveModule.Meta;
import eu.coresense.CognitiveModule.Modelet;
import eu.coresense.cognitivemodule.services.CogModGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CogModSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CogModGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CognitiveModulePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CognitiveModulePackage.COGNITIVE_MODULE:
				sequence_CognitiveModule(context, (CognitiveModule) semanticObject); 
				return; 
			case CognitiveModulePackage.CORE:
				sequence_Core(context, (Core) semanticObject); 
				return; 
			case CognitiveModulePackage.COUPLING:
				sequence_Coupling(context, (Coupling) semanticObject); 
				return; 
			case CognitiveModulePackage.META:
				sequence_Meta(context, (Meta) semanticObject); 
				return; 
			case CognitiveModulePackage.MODELET:
				sequence_Modelet(context, (Modelet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CognitiveModule returns CognitiveModule
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         core=Core 
	 *         efferent+=Modelet* 
	 *         afferent+=Modelet* 
	 *         meta=Meta 
	 *         coupling=Coupling
	 *     )
	 * </pre>
	 */
	protected void sequence_CognitiveModule(ISerializationContext context, CognitiveModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Core returns Core
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Core(ISerializationContext context, Core semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CognitiveModulePackage.Literals.CORE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CognitiveModulePackage.Literals.CORE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoreAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Coupling returns Coupling
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Coupling(ISerializationContext context, Coupling semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CognitiveModulePackage.Literals.COUPLING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CognitiveModulePackage.Literals.COUPLING__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCouplingAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Meta returns Meta
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Meta(ISerializationContext context, Meta semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CognitiveModulePackage.Literals.META__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CognitiveModulePackage.Literals.META__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetaAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Modelet returns Modelet
	 *
	 * Constraint:
	 *     (name=EString topic=EString type=EString)
	 * </pre>
	 */
	protected void sequence_Modelet(ISerializationContext context, Modelet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CognitiveModulePackage.Literals.MODELET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CognitiveModulePackage.Literals.MODELET__NAME));
			if (transientValues.isValueTransient(semanticObject, CognitiveModulePackage.Literals.MODELET__TOPIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CognitiveModulePackage.Literals.MODELET__TOPIC));
			if (transientValues.isValueTransient(semanticObject, CognitiveModulePackage.Literals.MODELET__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CognitiveModulePackage.Literals.MODELET__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModeletAccess().getNameEStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getModeletAccess().getTopicEStringParserRuleCall_4_0(), semanticObject.getTopic());
		feeder.accept(grammarAccess.getModeletAccess().getTypeEStringParserRuleCall_6_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
